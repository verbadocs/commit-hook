#!/bin/bash

PROMPTS_FILE="verba/prompts.txt"
PROMPT_HISTORY_DIR="verba/prompt_history"
PROMPT_LOG_FILE="$PROMPT_HISTORY_DIR/prompt-logs-$(date +%Y%m%d-%H%M%S).md"

if [ ! -f "$PROMPTS_FILE" ]; then
    exit 0
fi

get_last_commit_timestamp() {
    if git rev-parse --verify HEAD >/dev/null 2>&1; then
        git log -1 --format="%ai" 2>/dev/null || echo "1970-01-01 00:00:00"
    else
        echo "1970-01-01 00:00:00"
    fi
}

LAST_COMMIT_TIME=$(get_last_commit_timestamp)
echo "Last commit time: $LAST_COMMIT_TIME" >&2

LAST_COMMIT_EPOCH=$(date -j -f "%Y-%m-%d %H:%M:%S %z" "$LAST_COMMIT_TIME" "+%s" 2>/dev/null || echo "0")

LAST_COMMIT_HASH=$(git rev-parse HEAD 2>/dev/null || echo "initial")
LAST_COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "initial")

mkdir -p "$PROMPT_HISTORY_DIR"

echo "# Prompt Logs - $(date)" > "$PROMPT_LOG_FILE"
echo "**Previous Commit:** ${LAST_COMMIT_HASH}" >> "$PROMPT_LOG_FILE"
echo "**Short Hash:** ${LAST_COMMIT_SHORT}" >> "$PROMPT_LOG_FILE"
echo "" >> "$PROMPT_LOG_FILE"
echo "Prompts since last commit ($LAST_COMMIT_TIME):" >> "$PROMPT_LOG_FILE"
echo "" >> "$PROMPT_LOG_FILE"

FOUND_LOGS=false
IN_VALID_SECTION=false

while IFS= read -r line; do
    # Check if we're starting a new timestamped section
    if [[ $line =~ ^\[([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2})\] ]]; then
        TIMESTAMP="${BASH_REMATCH[1]}"
        # Convert ISO timestamp to epoch (handle macOS timezone format)
        # Remove colon from timezone: 2025-09-15T18:45:20-07:00 -> 2025-09-15T18:45:20-0700
        CLEAN_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's/\([+-][0-9][0-9]\):\([0-9][0-9]\)$/\1\2/')
        LOG_EPOCH=$(date -j -f "%Y-%m-%dT%H:%M:%S%z" "$CLEAN_TIMESTAMP" "+%s" 2>/dev/null || echo "0")
        
        if [ "$LOG_EPOCH" -gt "$LAST_COMMIT_EPOCH" ]; then
            IN_VALID_SECTION=true
            echo "" >> "$PROMPT_LOG_FILE"
            echo "## $line" >> "$PROMPT_LOG_FILE"
            echo "" >> "$PROMPT_LOG_FILE"
            FOUND_LOGS=true
        else
            IN_VALID_SECTION=false
        fi
    elif [ "$IN_VALID_SECTION" = true ]; then
        # We're in a valid section, include all content
        if [[ $line =~ ^FILE:\ (.+)$ ]]; then
            # File header
            echo "**${line}**" >> "$PROMPT_LOG_FILE"
        elif [[ $line =~ ^-+$ ]]; then
            # Separator line
            echo "\`\`\`" >> "$PROMPT_LOG_FILE"
        elif [[ $line =~ ^[[:space:]]*[0-9]+[[:space:]]*[+→-][[:space:]] ]]; then
            # Diff line (numbered lines with +, →, or -)
            echo "$line" >> "$PROMPT_LOG_FILE"
        elif [[ $line =~ ^[[:space:]]*$ ]]; then
            # Empty line
            echo "" >> "$PROMPT_LOG_FILE"
        else
            # Regular content (file contents, etc.)
            echo "$line" >> "$PROMPT_LOG_FILE"
        fi
    fi
done < "$PROMPTS_FILE"

if [ "$FOUND_LOGS" = false ]; then
    echo "- No new prompts since last commit" >> "$PROMPT_LOG_FILE"
fi

echo "" >> "$PROMPT_LOG_FILE"
echo "---" >> "$PROMPT_LOG_FILE"
echo "*Auto-generated from $PROMPTS_FILE*" >> "$PROMPT_LOG_FILE"

git add "$PROMPT_LOG_FILE"
echo "Added $PROMPT_LOG_FILE to commit" >&2
